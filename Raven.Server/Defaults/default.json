[
  {
    "DocId": "raven_documentation/index",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Documentation Index</h2><div style=\"padding:5px;margin:5px;border:1px solid #BBB;background-color:#EEE\"><b>Contents</b><br /><br /><div style=\"margin:10px\">\n  The Basics\n  <ul><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_restful\" rel=\"nofollow\">Overview</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_database_layout\" rel=\"nofollow\">Database Layout</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_security\" rel=\"nofollow\">Security</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_concurrency\" rel=\"nofollow\">Revisions &amp; Concurrency (E-Tags)</a></li></ul><br />\n  Single Document Operations\n  <ul><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_get\" rel=\"nofollow\">GET</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_update\" rel=\"nofollow\">PUT</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_create\" rel=\"nofollow\">POST</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_delete\" rel=\"nofollow\">DELETE</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_api_patch\" rel=\"nofollow\">PATCH</a></li></ul><br />\n  Multiple Document Operations\n  <ul><li>Batching Requests</li></ul><br />\n  Indexes\n  <ul><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_indexes\" rel=\"nofollow\">Simple</a></li><li><a href=\"/raven/view.html?docId=raven_documentation/docs_http_indexes_map_reduce\" rel=\"nofollow\">Map - Reduce</a></li></ul><br /></div></div><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "Index"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_restful",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Overview</h2><p>\nRavenDB provides an HTTP API for accessing and manipulating data on the server.\nThis API sits next to the C# Client API, providing most of the same functionality, but with a platform agnostic, web friendly orientation.\nUsing the HTTP API it is possible to write a fully functioning RavenDB application using just Javascript and HTML.\n</p><br /><p>\nAs part of being web friendly, the HTTP API follows commonly understood RESTful principles.\nFor example, database documents are addressable resources via unique URLs and those resources\ncan be acted upon using the HTTP verbs of GET, PUT, POST and DELETE.\n</p><br /><p>\nHowever, while being RESTful is a goal of the HTTP API, it is secondary to the goal of\nexposing easy to use and powerful fuctionality such as batching and multi-document transactions.\n</p><br /><p>\nThe remaining sections of this documentation explain how to use this HTTP API to build powerful web applications.\nThroughout these sections example request and responses are shown. These requests were created using the powerful\ncommand line tool, curl. More details about curl can be found at: <a href=\"http://curl.haxx.se/docs/manual.html\" rel=\"nofollow\">http://curl.haxx.se/docs/manual.html</a></p><br /><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Overview"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_database_layout",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Database Layout</h2><p>\nEvery document, attachment and index in RavenDB is addressable by a URL on the server, following a simple format.\n</p><br /><p>\nDocuments are addressable by document id, under the docs area:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">http://localhost:8080/docs/{document_id}\n</pre><p></p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">Attachment are addressable by the attachment path, under the static area:</p><pre style=\"background-color:rgb(243, 245, 247);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-color:rgb(174, 189, 204);border-right-color:rgb(174, 189, 204);border-bottom-color:rgb(174, 189, 204);border-left-color:rgb(174, 189, 204)\">http://localhost:8080/static/{attachment_path}</pre><p></p><p>\nIndexes are addressable by index id, under the indexes area:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">http://localhost:8080/indexes/{index_id}\n</pre><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Database Layout"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_security",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Security for Anonymous Access</h2><p>\nWith any document accessible by a URL on the server,\nsome measure of security is necessary to secure access to these documents.\n</p><br /><p>\nAny method that would normally be used to authenticate and secure access to a given URL can\nbe used, but RavenDB also provides security options to control anonymous access.\n</p><br /><p>\nBy default such anonymous users can GET any documents they want, but not modify or add any documents or indexes.\nThis option is called \"Get\". The other options are to grant anonymous users all priveledges on the database (\"All\") or no access at all (\"None\").\nYou can set which option you prefer in the app.config as follows:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">  &lt;appSettings&gt;\n    &lt;add key=\"AnonymousAccess\" value=\"All\"/&gt;\n  &lt;/appSettings&gt;</pre><p><br />\nYou can also specify the security settings for anonymous users when starting the RavenDB server executable:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">(\"Get\") Raven.Server.exe /debug\n(\"All\") Raven.Server.exe /test\n</pre><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Security for Anonymous Access"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_concurrency",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Revisions and Concurrency with E-Tags</h2><p>RavenDB defines some simple rules to determine how to handle concurrent or near requests from the HTTP API against the same document.\n</p><br /><h4>Leveraging E-Tags</h4><p>Every document in RavenDB has a corresponding e-tag (entity tag). This e-tag is updated by RavenDB every time the document is changed.\n</p><br /><p>When you request to update a document, you can specify the e-tag of the document you were working with in the \"If-Match\" element of the header.\nFor example, using the cURL utility to build the request:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl --header \"If-Match:dd62a2e0-2744-11df-a9ff-001c251ced36\"Â \n         -X PUT http://localhost:8080/docs/bobs_address -d \"{ FirstName : 'Bob', LastName: 'Smith', Address: '5 Elm St.' }\"\n</pre><p>If the e-tag specified in the header matches the current e-tag of the document in RavenDB, then this update will go through successfully.\n</p><br /><p>If the document has been updated by someone else before you, then the e-tag's won't match and RavenDB will return a conflict error:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 409 Conflict\n\n{\"url\":\"/docs/bobs_address\",\"actualETag\":\"dd62a2e0-2744-11df-a9ff-001c251ced36\",\"expectedETag\":\"ac6ca153-2745-11df-a9ff-001c251ced36\",\n         \"error\":\"PUT attempted on document 'bobs_address' using a non current etag\"}\n</pre><p>\nAt this point, the update was reject, nothing on the server has changed, and it is up to you as the user of the API to determine how to respond to this conflict.\n</p><br /><h4>Last One in Wins</h4><p>When the e-tag is not specified in the header for a given request, the last request processed for that URL wins.\n</p><br /><p>Because of this, to ensure that updates are processed as you expect them to, it is recommended you always specify an e-tag for update requests.\n</p><br /><p>Unless your problem space demands it, it is generally not useful to specify an e-tag for deletes.</p><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Revisions and Concurrency with E-Tags"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_get",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Single Document Operations - GET</h2><p>\n  Perform a GET request to read a JSON document from its URL:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X GET http://localhost:8080/docs/bobs_address\n</pre><br />\n  Assuming there is a document with an id of \"bobs_address\", RavenDB will respond with\n  the contents of that document and an HTTP 200 OK response code:\n<pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 200 OK\n\n{\n  \"FirstName\": \"Bob\",\n  \"LastName\": \"Smith\",\n  \"Address\": \"5 Elm St.\"\n}\n</pre><br /><p>\nIf the URL specified does not point to a valid document, RavenDB follows HTTP conventions and responds with:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 404 Not Found\n</pre><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Single Document Operations - GET"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_update",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Single Document Operations - PUT</h2><p>\nPerform a PUT request to /docs/{document_id} to create the specified document with the given document id:\n</p><br /><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PUT http://localhost:8080/docs/bobs_address -d \"{ FirstName: 'Bob', LastName: 'Smith', Address: '5 Elm St' }\"\n</pre><br /><p>\nFor a successful request, RavenDB will respond with the id it generated and an HTTP 201 Created response code:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 201 Created\n\n{\n  \"id\" : \"bobs_address\"\n}\n</pre><br /><p>It is important to note that a PUT in RavenDB will always create the specified document at the request URL, if necessary overwriting what was there before.\n</p><br /><p>A PUT request to /docs without specifying the document id in the URL is an invalid request and RavenDB will return a HTTP 400 Bad Request response code.\n</p><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Single Document Operations - PUT"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_create",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Single Document Operations - POST</h2><p>\nPerform a POST request to the /docs area to create the specified document and allow RavenDB to assign a unique id to it:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X POST http://localhost:8080/docs -d \"{ FirstName: 'Bob', LastName: 'Smith', Address: '5 Elm St' }\"\n</pre><br /><p>\nFor a successful request, RavenDB will respond with the id it generated and an HTTP 201 Created response code:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 201 Created\n\n{\n  \"id\" : \"458620e0-2a65-11df-9a26-001c251ced36\"\n}\n</pre><br /><p>It is important to note that a repeated POST request for the same document will create that document in a new place, with a new id each time.\n</p><br /><p>A POST to a document URL is an invalid request and RavenDB will return a HTTP 400 Bad Request response code.</p><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Single Document Operations - POST"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_delete",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Single Document Operations - DELETE</h2><p>\nPerform a DELETE request to delete the JSON document specified by the URL:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X DELETE http://localhost:8080/docs/bobs_address\n</pre><br /><p>\nFor a successful delete, RavenDB will respond with an HTTP response code 204 No Content:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">\"HTTP/1.1 204 No Content\"\n</pre><br /><h4>Hard vs. Soft Deletes</h4><p>\nDeleting a document through the HTTP API is not reversible. In database terms it is termed a \"hard\" delete.\n</p><br /><p>\nAn alternative approach is to mark a document with a deleted flag and then ignore documents like this in your business logic.\n</p><br /><p>\nThis approach, a \"soft\" delete, preserves the data intact in RavenDB and can be useful for auditing or undoing a user's actions.\n</p><br /><p></p><p>\nThe right approach for you will depend on the problem space your data is modeling.\n</p><br /><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Single Document Operations - DELETE"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_api_patch",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Single Document Operations - PATCH</h2><p>\nBy using a PATCH request, any single document within RavenDB can be updated without replacing the entire document with a PUT.\n</p><br /><p>\nAll PATCH requests are made to the URL of the document, and follow the general format of:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PATCH http://localhost:8080 -d \"{ type: |patch_operation|, name: |document_property|, value: |new_value| }\"\n</pre><br /><p>\nRavenDB will return a short JSON acknowledgment and HTTP 200 OK response code for a successful patch:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP 1.1/200 OK\n\n{ \"patched\":true }\n</pre><br /><p>\nFor the purposes of these examples, suppose we start with this document:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">http://localhost:8080/docs/post_1\n{ title: \"A Blog Post\", body: \"html markup here\", comments: [ {author: \"ayende\", text: \"good post\"} ] }\n</pre><br /><h4>Patch Operations</h4><p>\n*Add a Property*\n</p><br /><p>\nPerform a PATCH request to the document URL with a type of \"set\" to add a property:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PATCH http://localhost:8080/post_1 -d \"{ type: 'set', name: 'blog_id', value: 1}\"\n</pre><br /><p>\nA subsequent GET of this document would show the patched result:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">{ title: \"A Blog Post\", body: \"html markup here\", comments: [ {author: \"ayende\", text: \"good post\"} ], blog_id: 1 }\n</pre><br /><p>\n*Update a Property*\n</p><br /><p>\nPerform a PATCH request to the document URL with a type of \"set\" to update an existing property:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PATCH http://localhost:8080/post_1 -d \"{ type: 'set', name: 'title', value: 'A Better Blog Post'}\"\n</pre><br /><p>\nA subsequent GET of this document would show the patched result:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">{ title: \"A Better Blog Post\", body: \"html markup here\", comments: [ {author: \"ayende\", text: \"good post\"} ], blog_id: 1 }\n</pre><br /><p>\n*Set a Property to NULL*\n</p><br /><p>\nPerform a PATCH request to the document URL with a type of \"set\" and the reserved value of null to set property to be null:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PATCH http://localhost:8080/post_1 -d \"{ type: 'set', name: 'blog_id', value: null }\"\n</pre><br /><p>\nA subsequent GET of this document would show the patched result:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">{ title: \"A Better Blog Post\", body: \"html markup here\", comments: [ {author: \"ayende\", text: \"good post\"} ], blog_id: null }\n</pre><br /><p>\n*Removing a Property*\n</p><br /><p>\nPerform a PATCH request to the document URL with a type of \"unset\" to remove a property from a document:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PATCH http://localhost:8080/post_1 -d \"{ type: 'unset', name: 'blog_id'}\"\n</pre><br /><p>\nA subsequent GET of this document would show the patched result:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">{ title: \"A Better Blog Post\", body: \"html markup here\", comments: [ {author: \"ayende\", text: \"good post\"} ] }\n</pre><br /><p>\nIf the property specified does not exist or has already been removed from the document, RavenDB will just respond with a 200 OK and do nothing.\n</p><br /><br /><p>\n*Operating on Nested Properties*\n</p><br /><p>\nPerform a PATCH request to the document URL with a type of \"modify\", and an optional \"position\" to manipulate a nested property:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PATCH http://localhost:8080/123 -d \"{ type: 'modify', name: 'comments', position: 1, value: [ { type: 'set', name: 'author_id', value: 1 } ]}\"\n</pre><br /><p>\nA subsequent GET of this document would show the patched result:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">{ title: \"A Better Blog Post\", body: \"html markup here\", comments: [ {author: \"ayende\", text: \"good post\", author_id: 1} ] }\n</pre><br /><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Single Document Operations - PATCH"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_indexes",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Simple Indexes</h2><p>\nIndexes enable advanced fast and complex queries of JSON documents already in RavenDB.\nIndexes are expressed using LINQ and are composed of up to two parts, a map and a reduce function.\n</p><br /><p>\nThis section of the documentation focuses on map only or simple indexes.\nThis type of index functions much like an index in a relational database.\nIt offers fast access to documents in RavenDB by a property or properties other then their unique id.\n</p><br /><h4>Creating a Simple Index </h4><p>\nImagine we had a document per user in our address book and wanted to find any users who live in Maryland.\nWe have five users, so five documents:\n</p><br /><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">http://localhost:8080/docs/bob\n{\n   \"Name\": \"Bob\",\n   \"HomeState\": \"Maryland\",\n   \"ObjectType\": \"User\"\n}\n\nhttp://localhost:8080/docs/sarah\n{\n   \"Name\": \"Sarah\",\n   \"HomeState\": \"Illinois\",\n   \"ObjectType\": \"User\"\n}\n\nhttp://localhost:8080/docs/paul\n{\n   \"Name\": \"Paul\",\n   \"HomeState\": \"Maryland\",\n   \"ObjectType\": \"User\"\n}\n\nhttp://localhost:8080/docs/mary\n{\n   \"Name\": \"Mary\",\n   \"HomeState\": \"Maryland\",\n   \"ObjectType\": \"User\"\n}\n\nhttp://localhost:8080/docs/george\n{\n   \"Name\": \"Bob\",\n   \"HomeState\": \"California\",\n   \"ObjectType\": \"User\"\n}\n\nIf you're following along with curl:\n&gt; curl -X PUT http://localhost:8080/docs/bob -d \"{ Name: 'Bob', HomeState: 'Maryland', ObjectType: 'User' }\"\n&gt; curl -X PUT http://localhost:8080/docs/sarah -d \"{ Name: 'Sarah', HomeState: 'Illinois', ObjectType: 'User' }\"\n&gt; curl -X PUT http://localhost:8080/docs/paul -d \"{ Name: 'Paul', HomeState: 'Maryland', ObjectType: 'User' }\"\n&gt; curl -X PUT http://localhost:8080/docs/mary -d \"{ Name: 'Mary', HomeState: 'Maryland', ObjectType: 'User' }\"\n&gt; curl -X PUT http://localhost:8080/docs/george -d \"{ Name: 'George', HomeState: 'California', ObjectType: 'User' }\"\n</pre><br /><p>To create an index to retrieve these documents by the HomeState property, make a PUT request to \\indexes\\{index_id}:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X PUT http://localhost:8080/indexes/usersByHomeState \n          -d \"{ Map:'from doc in docs\\r\\nwhere doc.ObjectType==\\\"User\\\"\\r\\nselect new { doc.HomeState }' }\"\n</pre><br /><p>\nOn a successful index create, RavenDB will respond with a HTTP 201 Created response code, and a JSON acknowledgment of the index just created:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 201 Created\n{\"index\":\"usersByHomeState\"}\n</pre><br /><h4>Querying a Simple Index</h4><p>\nPerform a GET request to the URL of an index to retrieve all the documents in that index:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X GET http://localhost:8080/indexes/usersByHomeState?query=HomeState%3AMaryland\n</pre><br /><p>\nRavenDB will respond with a result set that includes all the matching records, plus some other useful information:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">{\"Results\":\n[{\"Name\":\"Mary\",\"HomeState\":\"Maryland\",\"ObjectType\":\"User\",\n           \"@metadata\":{\"Content-Type\":\"application/x-www-form-urlencoded\",\"@id\":\"mary\",\"@etag\":\"25ff8144-36f8-11df-858f-001de034b773\"}},\n{\"Name\":\"Paul\",\"HomeState\":\"Maryland\",\"ObjectType\":\"User\",\n           \"@metadata\":{\"Content-Type\":\"application/x-www-form-urlencoded\",\"@id\":\"paul\",\"@etag\":\"25ff8145-36f8-11df-858f-001de034b773\"}},\n{\"Name\":\"Bob\",\"HomeState\":\"Maryland\",\"ObjectType\":\"User\",\n           \"@metadata\":{\"Content-Type\":\"application/x-www-form-urlencoded\",\"@id\":\"bob\",\"@etag\":\"25ff8147-36f8-11df-858f-001de034b773\"}}],\n \"IsStale\":false,\"TotalResults\":3}\n</pre><br /><p>In the result set, \"TotalResults\" is a count of the matching records.\n</p><br /><p>\n\"IsStale\" is a boolean indicator of whether or not this index (and results) are up to date.\nWhen an index is first created or when new documents are added that could be part of the index,\nRavenDB runs a background process to update the index.\nIf this process is running while an index query is issued, then the last known results will be returned,\nbut clearly marked as stale with \"IsStale\" set to true.\n</p><br /><h4>Paging Results</h4><p>\nRavenDB allows you to control how many documents are returned from an index query by using the query string arguments \"start\" and \"pageSize\".\n\"pageSize\" specifies how many records to return, \"start\" is the starting position within all results to return \"pageSize\" records from.\nSo with our Maryland users, we could break up the results as follows:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X GET \"http://localhost:8080/indexes/usersByHomeState?query=HomeState%3AMaryland&amp;start=0&amp;pageSize=2\"\n\n{\"Results\":\n[{\"Name\":\"Mary\",\"HomeState\":\"Maryland\",\"ObjectType\":\"User\",\n            \"@metadata\":{\"Content-Type\":\"application/x-www-form-urlencoded\",\"@id\":\"mary\",\"@etag\":\"25ff8144-36f8-11df-858f-001de034b773\"}},\n{\"Name\":\"Paul\",\"HomeState\":\"Maryland\",\"ObjectType\":\"User\",\n            \"@metadata\":{\"Content-Type\":\"application/x-www-form-urlencoded\",\"@id\":\"paul\",\"@etag\":\"25ff8145-36f8-11df-858f-001de034b773\"}}],\n \"IsStale\":false,\"TotalResults\":3}\n\n&gt; curl -X GET \"http://localhost:8080/indexes/usersByHomeState?query=HomeState%3AMaryland&amp;start=2&amp;pageSize=2\"\n\n{\"Results\":\n[{\"Name\":\"Bob\",\"HomeState\":\"Maryland\",\"ObjectType\":\"User\",\n            \"@metadata\":{\"Content-Type\":\"application/x-www-form-urlencoded\",\"@id\":\"bob\",\"@etag\":\"25ff8147-36f8-11df-858f-001de034b773\"}}],\n  \"IsStale\":false,\"TotalResults\":3}\n</pre><br /><h4>Deleting an Index</h4><p>\nTo delete an index, use the following syntax:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X DELETE http://localhost:8080/indexes/usersByHomeState\n</pre><br /><p>RavenDB will respond with an HTTP 204 No Content response code for a successful delete.</p><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Simple Indexes"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  },
  {
    "DocId": "raven_documentation/docs_http_indexes_map_reduce",
    "Document": {
      "Html": "<div class=\"layoutregion\"><div id=\"g_body\" style=\"overflow: auto;\"><h2>HTTP API - Map Reduce Indexes</h2><p>\nIndexes enable advanced fast and complex queries of JSON documents already in RavenDB.\nIndexes are expressed using LINQ and are composed of up to two parts, a map and a reduce function.\n</p><br /><p>\nThis section of the documentation focuses on map reduce indexes.\nMap reduce indexes allow for complex aggregation of data by first selecting records (map) and\nthen applying the specified reduce function to these records to produce a smaller set of results.\n</p><br /><p>\nFor a more in-depth look at how map reduce works, read this post: <a href=\"http://ayende.com/Blog/archive/2010/03/14/map-reduce-ndash-a-visual-explanation.aspx\" rel=\"nofollow\">Map / Reduce a Visual Explanation</a>.\n</p><br /><h4>Creating a Map Reduce Index </h4><p>\nMap reduce indexes are created in the same way as simple indexes, just with a reduce function specified as well:\n</p><br /><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">curl -X PUT http://localhost:8080/indexes/byEmail -d \"{ Map: 'from doc in docs where doc.email != null select new {doc.email, count = 1 };' ,\n Reduce: 'from result in results group result by result.email into g select new { email = g.Key, count = g.Count()  } '}\"\n</pre><br /><p>\nOn a successful index create, RavenDB will respond with a HTTP 201 Created response code, and a JSON acknowledgment of the index just created:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">HTTP/1.1 201 Created\n{\"index\":\"byEmail\"}\n</pre><br /><h4>Querying a Map Reduce Index</h4><p>\nQuerying a Map Reduce is done the same way as with a simple index. Assuming we've previously added a document such as:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">curl -X PUT \"{ _id: 'ayende',email: 'ayende@ayende.com', projects: [ 'rhino mocks','nhibernate','rhino service bus','raven db' ] }\"\n</pre><br /><p>Then a query of the \"byEmail\" map reduce index would look like:\n</p><pre style=\"background-color:#F3F5F7;border:1px solid #AEBDCC\">&gt; curl -X GET http://localhost:8080/indexes/byEmail?query=email:ayende@ayende.com\n\n{\"Results\":[{\"email\":\"ayende@ayende.com\",\"count\":\"1\"}],\"IsStale\":false,\"TotalResults\":1}\n</pre><br /><h4>Paging Results &amp; Deleting</h4><p>\nPaging results and deleting a map reduce index are accomplished the same way as for a simple index.</p><wbr></wbr></div><div class=\"clear\"></div></div>",
      "Name": "HTTP API - Map Reduce Indexes"
    },
    "Type": "raven documentation",
    "Metadata": {
      "Raven-View-Template": "/raven/JSONTemplates/documentation.html"
    }
  }
]